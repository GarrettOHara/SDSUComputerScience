import java.util.*;
import java.io.*;
public class Driver extends Decoder
{
    public static void main (String[] args)
	{
        if (args.length < 2)
        {
            System.out.println("Error: Inatequate arguments passed to program");
            System.exit(1);
        }
		String testFile = args[0];
		String patternFile = args[1];
		System.out.println(testFile);
		System.out.println(patternFile);
		inputReader(queue, testFile);
		milesReader(milesPatterns, milesCodes, patternFile);
		fileWriter(dataDecoder(queue, milesCodes, output));
	}
}
public class Decoder extends ReadFile
{
	public static Queue dataDecoder(Queue queue, ArrayList<Integer[]> milesCodes, 
			Queue output)
	{
		int[] peekValues;
		boolean dequeue = false;
		while (queue.size() > 5)
		{
			if (queue.size() == 6)
				peekValues = queue.peek(6);
			else
				peekValues = queue.peek(7);
			int valToSubtract = peekValues[0];
			int subtractedVal = 0;
			for(int i = 0; i < peekValues.length; i++)
			{
				subtractedVal = peekValues[i] - valToSubtract;
				peekValues[i] = subtractedVal;
			}
			for(Integer[] milesCode : milesCodes)
			{
				dequeue = false;
				boolean noise = false;
				int counter = 0;
				int milesIndex = 0;
				for (int index = 0; index < peekValues.length; index++)
				{
					if(peekValues[index] == milesCode[milesIndex])
					{
						counter++;
						milesIndex++;
					}
					else
					{
						if (noise == true)
							continue;
						else if ((milesCode[index] - milesCode[index-1]) < 0)
						{
							noise = false;
							break;
						}	
						noise = true;
					}			
				}
				if(counter == 6 && noise == false)
				{
					output.loadValue(milesCode[6]);
					for (int i = 0; i < peekValues.length-1; i++)
					{
						queue.nextValue();
					}
					dequeue = true;
					break;
				}
				else if (counter == 6 && noise == true)
				{
					output.loadValue(milesCode[6]);
					for (int i = 0; i < peekValues.length; i++)
					{
						queue.nextValue();
					}
					dequeue = true;
					break;
				}
			}
			if(dequeue == false)
				queue.nextValue();
		}
		output.print();
		return output;
	}
	public static void fileWriter(Queue output)
	{
		try
		{
			PrintWriter file = new PrintWriter("output.csv");
			int counter = output.size();
			for (int i = 0; i < counter; i++)
			{
				if (i == (counter - 1))
					file.print(iterate(output));
				else
					file.print(iterate(output) + ",");
			}
			file.close();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		}
	}
	private static int iterate(Queue output)
	{
		return output.nextValue();
	}
}
public class ReadFile 
{
	public static Queue queue = new Queue();
	public static Queue output = new Queue();
	public static ArrayList<String[]> milesPatterns = new ArrayList<String[]>();
	public static ArrayList<Integer[]> milesCodes = new ArrayList<Integer[]>();
	public Queue queue()
	{
		return this.queue();
	}
	public Queue output()
	{
		return this.output();
	}
	public ArrayList<String[]> milesPatterns()
	{
		return this.milesPatterns();
	}
	public ArrayList<Integer[]> milesCodes()
	{
		return this.milesCodes();
	}
	public static Queue inputReader(Queue queue, String testFile)
	{
		String line = "";		
		try
		{
			FileReader file = new FileReader(testFile);
			@SuppressWarnings("resource")
			BufferedReader reader = new BufferedReader(file);
			
			while((line = reader.readLine()) != null)
			{
				String [] values = line.split(",");
				for (int i = 0; i < values.length; i++)
					queue.loadValue(Integer.parseInt(values[i]));
			}
			int counter = 0;
			for (int index = 0; index < queue.size(); index++)
			{
				counter++;
			}
			if (counter < 6)
				throw new IllegalArgumentException("Input to decode is not large enough");
		}
		catch(IllegalArgumentException e)
		{
			System.out.println(e.getMessage());
			System.exit(2);
		}
		catch(FileNotFoundException e)
		{
			e.printStackTrace();
			System.exit(3);
		}
		catch(IOException e)
		{
			e.printStackTrace();
			System.exit(4);
		}
		return queue;
	}
	public static ArrayList<Integer[]> milesReader(ArrayList<String[]> milesPatterns, 
			ArrayList<Integer[]> milesCodes, String patternFile)
	{
		String line = "";
		try
		{
			FileReader file = new FileReader(patternFile);
			@SuppressWarnings("resource")
			BufferedReader reader = new BufferedReader(file);
			while((line = reader.readLine()) != null)
			{		
				String[] valuesFromFile = line.split(",");
				milesPatterns.add(valuesFromFile);
			}
			for(String[] array: milesPatterns)
			{	
				Integer[] integersToAdd = new Integer[array.length];
				for (int i = 0; i < array.length; i++)
				{
					integersToAdd[i] = Integer.parseInt(array[i]);
				}
				milesCodes.add(integersToAdd);
			}
		}
		catch(FileNotFoundException e)
		{
			e.printStackTrace();
			System.exit(3);
		}
		catch(IOException e)
		{
			e.printStackTrace();
			System.exit(4);
		}
		return milesCodes;
	}
}
